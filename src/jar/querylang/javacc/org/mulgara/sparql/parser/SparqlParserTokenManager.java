/* Generated By:JavaCC: Do not edit this line. SparqlParserTokenManager.java */
package org.mulgara.sparql.parser;
import java.io.StringReader;
import static org.mulgara.sparql.parser.QueryType.*;
import org.mulgara.sparql.parser.cst.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.LinkedList;
import static org.mulgara.sparql.parser.cst.Nil.NIL_NODE;

public class SparqlParserTokenManager implements SparqlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 1;
         return jjMoveNfa_0(4, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_0(4, 0);
      case 12:
         jjmatchedKind = 4;
         return jjMoveNfa_0(4, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(4, 0);
      case 32:
         jjmatchedKind = 5;
         return jjMoveNfa_0(4, 0);
      case 33:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 35:
         jjmatchedKind = 6;
         return jjMoveNfa_0(4, 0);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 40:
         jjmatchedKind = 47;
         return jjMoveNfa_0(4, 0);
      case 41:
         jjmatchedKind = 49;
         return jjMoveNfa_0(4, 0);
      case 42:
         jjmatchedKind = 41;
         return jjMoveNfa_0(4, 0);
      case 43:
         jjmatchedKind = 65;
         return jjMoveNfa_0(4, 0);
      case 44:
         jjmatchedKind = 50;
         return jjMoveNfa_0(4, 0);
      case 45:
         jjmatchedKind = 66;
         return jjMoveNfa_0(4, 0);
      case 46:
         jjmatchedKind = 45;
         return jjMoveNfa_0(4, 0);
      case 47:
         jjmatchedKind = 67;
         return jjMoveNfa_0(4, 0);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 59:
         jjmatchedKind = 51;
         return jjMoveNfa_0(4, 0);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 59;
         return jjMoveNfa_0(4, 0);
      case 62:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x40040000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1000000a00L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80280800000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8100001000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x30408000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x10008240000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1100400L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4000004100L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 91:
         jjmatchedKind = 55;
         return jjMoveNfa_0(4, 0);
      case 93:
         jjmatchedKind = 56;
         return jjMoveNfa_0(4, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 97:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x60000040000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000a00L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x280800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8100001000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x30408000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10008240000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1100400L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000004100L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 123:
         jjmatchedKind = 44;
         return jjMoveNfa_0(4, 0);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 125:
         jjmatchedKind = 46;
         return jjMoveNfa_0(4, 0);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xc208280200L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x90c00800100L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x180040000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000020000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000013400L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x40070408000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 89:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc208280200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c00800100L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x180040000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000020000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000013400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x70408000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 121:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 67:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000400L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000L);
      case 75:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x8120000100L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000c0000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8220000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 82:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080800200L);
      case 84:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000008000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000400L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000L);
      case 107:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8120000100L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000c0000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8220000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800200L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000008000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 67:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 69:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4400080500L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 71:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x20140000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 77:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x2408000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8001020000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4400080500L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 103:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20140000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2408000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8001020000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000100L);
      case 68:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x101000000L);
      case 72:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80010000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 78:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 82:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 84:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4220020000L);
      case 88:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000100L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x101000000L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80010000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4220020000L);
      case 120:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x4820000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x90100000L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 84:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         break;
      case 88:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4820000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x90100000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         break;
      case 120:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 68:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         break;
      case 75:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x4020000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         break;
      case 107:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4020000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8020000L);
      case 69:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8020000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 7);
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 76:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 9);
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 10;
         }
         break;
      case 115:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 10);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 154;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0xc0000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(103, 104);
                  else if (curChar == 58)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(15, 18);
                  else if (curChar == 40)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  else if (curChar == 43)
                     jjCheckNAddStates(19, 23);
                  else if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  break;
               case 0:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if ((0x3ff200000000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 5:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 45)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0xc0000000000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 16:
                  if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 20:
                  if (curChar == 39 && kind > 94)
                     kind = 94;
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 25:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddStates(30, 33);
                  break;
               case 27:
               case 32:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 30:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 31:
                  if (curChar == 39)
                     jjAddStates(34, 35);
                  break;
               case 33:
                  if (curChar == 39 && kind > 96)
                     kind = 96;
                  break;
               case 34:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 36:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 34)
                     jjCheckNAddStates(36, 39);
                  break;
               case 38:
               case 43:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 42:
                  if (curChar == 34)
                     jjAddStates(40, 41);
                  break;
               case 44:
                  if (curChar == 34 && kind > 97)
                     kind = 97;
                  break;
               case 45:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 47:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 41 && kind > 99)
                     kind = 99;
                  break;
               case 52:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x3ff200000000000L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 57:
                  if (curChar == 60)
                     jjCheckNAddStates(15, 18);
                  break;
               case 58:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 62 && kind > 70)
                     kind = 70;
                  break;
               case 60:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0xc0000000000L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 64:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 65:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar == 58 && kind > 71)
                     kind = 71;
                  break;
               case 67:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 68:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if (curChar == 58)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if ((0x3ff200000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 73:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 74:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if (curChar == 58)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0xc0000000000L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 77:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 78:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if (curChar == 58)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 81:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0xc0000000000L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 84:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 85:
                  if ((0x3ff200000000000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 86:
                  if (curChar != 58)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(12, 14);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(0, 6);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(91);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 93:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 96:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(97);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 99);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(101);
                  break;
               case 102:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(103);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 106:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(107);
                  break;
               case 108:
                  if (curChar == 43)
                     jjCheckNAddStates(19, 23);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar != 46)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(112);
                  break;
               case 113:
                  if (curChar == 46)
                     jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(114);
                  break;
               case 115:
                  if (curChar == 46)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 118:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(119);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(119);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(57, 60);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 125:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(126);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(126);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(130);
                  break;
               case 131:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(132);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 134:
                  if (curChar != 46)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(135);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(135);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAdd(137);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(137);
                  break;
               case 138:
                  if (curChar == 46)
                     jjCheckNAdd(139);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 141:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(142);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(142);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 64);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 145:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 148:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(149);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(149);
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(150, 151);
                  break;
               case 152:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(153);
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(153);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  else if (curChar == 91)
                     jjAddStates(42, 43);
                  else if (curChar == 64)
                     jjCheckNAdd(12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddStates(65, 78);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(7);
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 64)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 51:
                  if (curChar == 91)
                     jjAddStates(42, 43);
                  break;
               case 53:
                  if (curChar == 93 && kind > 101)
                     kind = 101;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 58:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 60:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(65, 78);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 105:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 117:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 147:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(97, 98);
                  break;
               case 151:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(99, 100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddStates(65, 78);
                  }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(10);
                  break;
               case 17:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 29);
                  break;
               case 22:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 26);
                  break;
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(30, 33);
                  break;
               case 39:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 39);
                  break;
               case 54:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 107)
                     kind = 107;
                  break;
               case 58:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(79, 80);
                  break;
               case 60:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(81, 82);
                  break;
               case 63:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(65, 78);
                  break;
               case 64:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(66);
                  break;
               case 67:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(69);
                  break;
               case 70:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(52, 54);
                  break;
               case 81:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(83);
                  break;
               case 84:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 106)
                     kind = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 154 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 7;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 7;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   88, 89, 90, 92, 93, 98, 99, 132, 133, 136, 138, 143, 70, 76, 80, 58, 
   59, 60, 61, 109, 110, 113, 115, 120, 22, 23, 25, 17, 18, 20, 27, 28, 
   29, 31, 32, 34, 38, 39, 40, 42, 43, 45, 52, 53, 64, 65, 67, 68, 
   73, 74, 77, 78, 81, 82, 83, 84, 85, 121, 122, 127, 128, 144, 145, 150, 
   151, 64, 65, 66, 67, 68, 69, 73, 74, 75, 77, 78, 79, 84, 85, 58, 
   59, 60, 61, 96, 97, 100, 101, 106, 107, 118, 119, 125, 126, 129, 130, 141, 
   142, 148, 149, 152, 153, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\52", "\101\123\103", "\104\105\123\103", "\173", "\56", "\175", "\50", "\72\75", 
"\51", "\54", "\73", "\141", "\141\52", "\141\53", "\133", "\135", "\174\174", 
"\46\46", "\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\53", "\55", "\57", "\41", 
"\136\136", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xc2bdff1ffffL, 
};
static final long[] jjtoSkip = {
   0xbeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 
};
static final long[] jjtoMore = {
   0x40L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[154];
private final int[] jjstateSet = new int[308];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SparqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SparqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 154; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 7;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
